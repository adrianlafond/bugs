!function(t,e){"object"==typeof exports&&"object"==typeof module?module.exports=e():"function"==typeof define&&define.amd?define("Bug",[],e):"object"==typeof exports?exports.Bug=e():t.Bug=e()}(window,function(){return function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(t,e,n){window,t.exports=function(t){var e={};function n(o){if(e[o])return e[o].exports;var r=e[o]={i:o,l:!1,exports:{}};return t[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=t,n.c=e,n.d=function(t,e,o){n.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:o})},n.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},n.t=function(t,e){if(1&e&&(t=n(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var r in t)n.d(o,r,function(e){return t[e]}.bind(null,r));return o},n.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return n.d(e,"a",e),e},n.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},n.p="",n(n.s=1)}([function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(t,e){void 0===t&&(t=0),void 0===e&&(e=0),this.x=t,this.y=e}return Object.defineProperty(t.prototype,"data",{get:function(){return{x:this.x,y:this.y}},enumerable:!0,configurable:!0}),t.prototype.clone=function(){return new t(this.x,this.y)},t.prototype.add=function(t){return this.x+=t.x,this.y+=t.y,this},t.prototype.subtract=function(t){return this.x-=t.x,this.y-=t.y,this},t.prototype.toString=function(){return JSON.stringify(this.data)},t.distance=function(t,e){return Math.sqrt((t.x-e.x)*(t.x-e.x)+(t.y-e.y)*(t.y-e.y))},t.radians=function(t,e){return Math.atan2(e.y-t.y,e.x-t.x)},t}();e.default=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(2);e.Angle=o.default;var r=n(0);e.Point=r.default;var i=n(3);e.Vector=i.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=function(){function t(){}return t.toRadians=function(t){return t*Math.PI/180},t.toDegrees=function(t){return 180*t/Math.PI},t.interpolate=function(e,n,o){return t.normalize(e+t.delta(e,n)*o)},t.delta=function(e,n){var o=t.normalize(e),r=t.normalize(n),i=r-o;return Math.abs(i)>Math.PI&&(i=r-2*Math.PI-o),i},t.normalize=function(t){var e=t%(2*Math.PI);return e<0&&(e+=2*Math.PI),e},t}();e.default=o},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(0),r=function(){function t(t,e,n){void 0===t&&(t=0),void 0===e&&(e=0),void 0===n&&(n=0),this.model={},t instanceof o.default?(this.model.point=t.clone(),this.model.radians=e):(this.model.point=new o.default(t,e),this.model.radians=n)}return Object.defineProperty(t.prototype,"point",{get:function(){return this.model.point.clone()},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"x",{get:function(){return this.model.point.x},set:function(t){this.model.point.x=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"y",{get:function(){return this.model.point.y},set:function(t){this.model.point.y=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"radians",{get:function(){return this.model.radians},set:function(t){this.model.radians=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"data",{get:function(){return{x:this.x,y:this.y,radians:this.radians}},enumerable:!0,configurable:!0}),t.prototype.clone=function(){return new t(this.point,this.radians)},t.prototype.toString=function(){return JSON.stringify(this.data)},t}();e.default=r}])},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(2);e.default=o.default},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var o=n(0),r=n(3),i=function(){function t(t){void 0===t&&(t={});var e=t.x,n=void 0===e?0:e,i=t.y,a=void 0===i?0:i,s=t.radians,u=void 0===s?0:s,c=t.target||{},f=c.x,l=void 0===f?0:f,d=c.y,p=void 0===d?0:d;this.model={segments:[new r.default({vector:new o.Vector(n,a,u)})],target:new o.Point(l,p),progress:0,step:0,maxSteps:2},this.target=this.model.target}return t.prototype.tick=function(t){var e=this;void 0===t&&(t=1),this.model.progress=Math.min(1,this.model.progress+.1);var n=this.model.progress>=1;return this.model.segments.forEach(function(t){t.tick(e.model.progress),n&&t.step()}),n&&(this.model.progress=0,this.model.step+=1,this.model.step>=this.model.maxSteps&&(this.model.step=0)),this},Object.defineProperty(t.prototype,"target",{get:function(){return this.model.target.data},set:function(t){this.model.target.x=t.x,this.model.target.y=t.y,this.model.segments[0].target=this.model.target},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"x",{get:function(){return this.model.segments[0].x},set:function(t){this.model.segments[0].x=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"y",{get:function(){return this.model.segments[0].y},set:function(t){this.model.segments[0].y=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"radians",{get:function(){return this.model.segments[0].radians},set:function(t){this.model.segments[0].radians=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"segments",{get:function(){return this.model.segments.map(function(t){return t.data})},enumerable:!0,configurable:!0}),t}();e.default=i},function(t,e,n){"use strict";var o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var r=n(0),i=n(4),a=function(){function t(t){var e=this;this.model={vector:new r.Vector,legs:[[new i.default({joints:[new r.Point(2,-5),new r.Point(12,-14)]}),new i.default({joints:[new r.Point(0,-5),new r.Point(0,-16)]}),new i.default({joints:[new r.Point(-4,-5),new r.Point(-8,-12)]})],[new i.default({joints:[new r.Point(2,5),new r.Point(12,14)]}),new i.default({joints:[new r.Point(0,5),new r.Point(0,16)]}),new i.default({joints:[new r.Point(-4,5),new r.Point(-8,12)]})]],maxRotation:.5*Math.PI,maxDistance:10,target:new r.Point,vectorStart:new r.Vector,step:0},this.model=o({},this.model,t),this.model.vectorStart=this.model.vector.clone(),this.model.legs.forEach(function(t){t.forEach(function(t){t.offsetAll(e.model.vector)})}),this.step()}return Object.defineProperty(t.prototype,"target",{get:function(){return this.model.target.clone()},set:function(t){this.model.target=t},enumerable:!0,configurable:!0}),t.prototype.tick=function(t){void 0===t&&(t=0);var e=this.model,n=e.target,o=e.vectorStart,i=e.maxDistance,a=Math.min(i,r.Point.distance(n,o.point));this.moveSegment(t,a),this.moveLegs(t,a)},t.prototype.step=function(){this.model.vectorStart=this.model.vector.clone(),this.model.step=(this.model.step+1)%this.model.legs.length,this.model.legs.forEach(function(t){t.forEach(function(t){t.step()})})},t.prototype.moveSegment=function(t,e){var n=this.model,o=n.target,i=n.vector,a=n.vectorStart,s=n.maxRotation,u=Math.atan2(o.y-a.y,o.x-a.x),c=Math.max(-s,Math.min(s,r.Angle.delta(i.radians,u)));i.radians=r.Angle.normalize(a.radians)+c*t,i.x=a.x+Math.cos(i.radians)*(e*t),i.y=a.y+Math.sin(i.radians)*(e*t)},t.prototype.moveLegs=function(t,e){var n=this,o=this.model,i=o.legs,a=o.vector,s=o.vectorStart;i.forEach(function(o,i){if(o.forEach(function(t){t.offset(a)}),i===n.model.step){var u=new r.Vector(s.x+Math.cos(a.radians)*e,s.y+Math.sin(a.radians)*e,a.radians);o.forEach(function(e){e.tick(u,t)})}})},Object.defineProperty(t.prototype,"x",{get:function(){return this.model.vector.x},set:function(t){this.model.vector.x=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"y",{get:function(){return this.model.vector.y},set:function(t){this.model.vector.y=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"radians",{get:function(){return this.model.vector.radians},set:function(t){this.model.vector.radians=t},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"data",{get:function(){return o({},this.model.vector.data,{legs:this.model.legs.map(function(t){return t.map(function(t){return t.data})})})},enumerable:!0,configurable:!0}),t}();e.default=a},function(t,e,n){"use strict";var o=this&&this.__assign||function(){return(o=Object.assign||function(t){for(var e,n=1,o=arguments.length;n<o;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}).apply(this,arguments)};Object.defineProperty(e,"__esModule",{value:!0});var r=n(0),i=function(){function t(t){this.model=o({},t,{map:this.clone(t.joints).map(function(t){return new r.Vector(t.x,t.y,Math.atan2(t.y,t.x))}),jointsStart:this.clone(t.joints)})}return t.prototype.offset=function(t,e){void 0===e&&(e=0);var n=this.model,o=n.joints,i=n.map,a=o[e],s=i[e],u=r.Point.distance(s.point,new r.Point(0,0)),c=s.radians+t.radians;a.x=t.x+Math.cos(c)*u,a.y=t.y+Math.sin(c)*u},t.prototype.offsetAll=function(t){var e=this;this.model.joints.forEach(function(n,o){e.offset(t,o)})},t.prototype.tick=function(t,e){var n=this.model,o=n.joints,i=n.jointsStart,a=n.map,s=o.length-1,u=Math.atan2(a[s].y,a[s].x)+t.radians,c=r.Point.distance(a[s].point,new r.Point),f=new r.Point(t.x+Math.cos(u)*c,t.y+Math.sin(u)*c),l=Math.atan2(f.y-i[s].y,f.x-i[s].x),d=r.Point.distance(f,i[s]);o[s].x=i[s].x+Math.cos(l)*(d*e),o[s].y=i[s].y+Math.sin(l)*(d*e)},t.prototype.step=function(){this.model.jointsStart=this.clone()},Object.defineProperty(t.prototype,"data",{get:function(){return this.model.joints.map(function(t){return t.data})},enumerable:!0,configurable:!0}),t.prototype.clone=function(t){return void 0===t&&(t=this.model.joints),t.map(function(t){return t.clone()})},t}();e.default=i}])});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,